每次扔进queue和stack里的东西不一定只有String，完全是可以自己定义的数据结构；

public class Stack<Item> {
  private Node first = null ;
  
  private class Node {
    Item item;
    Node next;
    }
    
  public boolean isEmpty() {
    return first ==null}
    
  public void push(Item item) {
    Node oldFirst = first;
    
    first = new Node();
    first.item = item;
    first.next = oldFirst;
    
  }
  
  public Item pop() {                 //From return type, we can say we are using generics impletation;
    Item item = first.item;           //存下来当前first里的item属性
    first = first.next;               //扔了自己
    return item;                      //返还信息
  }
  
  用array实现的时候
  
  public class FixedCapacityStack<Item> {
    private Item[] s;
    private int N = 0;
    
    public FixedCapacityStack(int capacity) {
      s = (Item[]) new Object[capacity];❌❌❌❌❌  不支持generic type array
    }
    
    public boolean isEmpty() { return N ==0; }
    
    public void push (Item item) { s[N++] = item; }
    
    public Item pop() { return s[--N]; }
    
