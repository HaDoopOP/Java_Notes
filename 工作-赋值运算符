short s = 4;
❌s = s +5;   //错误，因为short只有2bytes，int4bytes。加起来之后就不是原来的short了。
            //是因为有两次运算，其中有一个自动转换动作。s+5了成了int，转换回去short丢失信息。

✅s+=5可以；因为只有以此赋值运算，不存在类型转换。


--------

logical运算符，用于连接boolean类型的表达式。

a>3 && a<6 " a>3 & a<6
&&区别在于前面，如果左侧为false，右侧不运算。因为不管是啥都是false。类似短路了。。。
&无论左边是true是false，右边都运算。

======用&&比&的优点========
|和||同上。
||：如果左边为真，右边不运算。因为不管是啥rerurn 都为true。效率比|高

-------------
bit operation
-------------

例子：          当位运算是<<时

              3<<2 //向左移动两位
0000-0000 0000-0000 0000-0000 0000-0011   ：3  3向左移动了2位。 👈是变大 3*2^n -->(n = 2)
0000-0000 0000-0000 0000-0000 0000-1100   ：12


              6>>2 //向右移动两位
0000-0000 0000-0000 0000-0000 0000-0110   ：6   6向右移动里2位 👉是变小
0000-0000 0000-0000 0000-0000 0000-0001   ：1 （10）挤掉了 向右把有效位弄没了。

移动的时候正负数都无所谓，因为如果前面几位是1，右移的时候拿1补。


例子：          当位运算是>>>时   3⃣️个>时，都用0来补！！！！！

1111-1111 1111-1111 1111-1111 1111-1010   ：-6
0111-1111 1111-1111 1111-1111 1111-1101




=============二进制运算=============
6 & 3

 110     把0看为假  把1看为真
&011
-----
 010


6 | 5
  110        答案为7
| 101
--------
  111  ----------》7
  
=========～是取反符=======
取反，再减1

～6 = -7
========================



