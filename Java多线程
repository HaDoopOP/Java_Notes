##Notes from watching https://www.udemy.com/efficient-java-multithreading-with-executors

###创建thread方法
    ~~~~~~创建一个class，extends Thread~~~~~~
    Public static void main(String[] args) {
    
    }
    
    
    Class FirstTask extends Thread {
      
      //Use for later to create thread ID
      private static int count = 0;
      private int id;
      
      @Override            //Override run 方法
      public void run() {
        for (int i = 10; i>0; i--) {
          Sysout.p( "<" + id + ">");
          
          try {
              TimeUnit.MILLISECONDS.sleep(200);
              } catch (InterruptedException e) {
                  e.printStackTrace();
                  }
              }
       } //结束run方法
       
       public FirstTask() {
          this.id = ++count;                 ######trick, 每次生成新Thread，都会自动执行run方法。并且每实现一个这个
          this.start();                       ######   FirstTask class实例，线程id都会自动increment by 1
        }
        
        
       <!-- 如果上面那个每次new instance自动run不合适，随时改回去。比如Thread t = new FirstTask();
                                                            t.start();###  -->
  }
  
  
    ~~~~~~~~~创建一个class implements Runnable~~~~~~~~~~~
    Public Static void main下面
    new FirstTask(); //不好，因为一旦启动不好操控
    
    Class FirstTask implements Runnable {       //由于没有继承Thread类而是仅仅实现了Runnable接口，所以Thread类下面的.start()那些不能用
                                                  //如果想用，就把这个直接转换回Thread类，如下
      //Use for later to create thread ID
      private static int count = 0;
      private int id;
      
      @Override            //Override run 方法
      public void run() {
        for (int i = 10; i>0; i--) {
          Sysout.p( "<" + id + ">");
          
          try {
              TimeUnit.MILLISECONDS.sleep(200);
              } catch (InterruptedException e) {
                  e.printStackTrace();
                  }
              }
       } //结束run方法
       
       public FirstTask() {
          this.id = ++count;                 
          <!--  this.start();     ##不能用了        -->
          new Thread(this).start();    <!--这样就可以了，转回Thread类了-->
        }
        
        
        
        <!--这种方法不好，因为一旦启动了，在main里面不能控制。如果我们不在乎可以这样走-->
  
  
        
